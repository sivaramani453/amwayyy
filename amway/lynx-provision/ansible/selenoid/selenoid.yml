---
- hosts: "all"
  become: True
  become_user: root
  vars:
    consul_join:
      - "node0.consul.hybris.eia.amway.net"
      - "node1.consul.hybris.eia.amway.net"
      - "node2.consul.hybris.eia.amway.net"
    consul_bind_address: !unsafe '{{ GetInterfaceIP \"eth0\" }}'
#    CONSUL_TEMPLATE_ADDITIONAL_GROUPS:
#      - ggr
  roles:
    - role: ansible-consul
      consul_group_name: "consul_instances"
    - role: ansible-role-selenoid
      selenoid_binary: 'true'
      concurrent_session_count: 15
    - role: ansible-role-consul-template

###################################### deregister old ec2 ami #########################################################
  post_tasks:
    - name: include default step variables
      include_vars: /tmp/default_step.yml

    - name: find latest AMI for server
      ec2_ami_facts:
        owners: 860702706577
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        region: "eu-central-1"
        filters:
          name: "selenoid-docker*"
      register: amis

    - name: AMI filter by date
      set_fact:
        filter_date: "{{ lookup('pipe','date \"+%Y-%m-%d\" -d \"7 days ago\"') }}"

    - debug: var=filter_date

    - name: Amis detected
      set_fact:
        amis_found: "{{ amis | json_query(\"images[*]\") }}"

    - debug:
        var: amis_found
      when: amis_found is defined

    - name: AMI filtered
      set_fact:
        filtered_amis: "{{ amis | json_query(\"images[?creation_date<=`\" + filter_date + \"`]\") }}"
      when: amis_found is defined and amis_found | length > 0

    - debug: var=filtered_amis

    - name: get previous ami
      set_fact:
        latest_ami: >
          {{ amis.images | sort(attribute='creation_date') | last }}
      when: amis_found is defined and amis_found | length > 0

    - name: ami_list for delete
      set_fact:
        ami_list: "{{ ami_list | default([]) | union([item.image_id]) }}"
      with_items: '{{ filtered_amis }}'
      when: amis_found is defined and amis_found | length > 0 and item.image_id != latest_ami.image_id

    - name: old amis
      debug:
        var: ami_list

    - name: previous ami
      debug: var=latest_ami.image_id

    - name: Delete old AMI
      ec2_ami:
        region: eu-central-1
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        image_id: "{{ item.image_id }}"
        delete_snapshot: yes
        state: absent
      with_items: '{{ filtered_amis }}'
      when: ami_list is defined and ami_list | length > 0 and item.image_id != latest_ami.image_id
##  #################################### deregister old ec2 ami #########################################################