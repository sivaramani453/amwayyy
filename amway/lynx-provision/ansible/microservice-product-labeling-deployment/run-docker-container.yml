---  
- name: Configure docker and launch container
  block: 
     - name: "Login into docker dev registry {{ docker_registry_name }}"
       docker_login:
         registry: "{{ docker_registry_name }}"
         username: "{{ docker_registry_username }}"
         password: "{{ docker_registry_password }}"
       when: not isProd 

     - name: "Login into docker prod registry"
       docker_login:
         username: "{{ docker_registry_username }}"
         password: "{{ docker_registry_password }}"
       when: isProd  

     - name: Launch ProductLabeling container
       docker_container:
         name: "{{ docker_container_name }}"
         image: "{{ docker_registry_name }}/{{ docker_image_name }}:{{ docker_image_version }}"
         state: started
         pull: True
         recreate: True
         restart_policy: always
         volumes:
            - "{{ docker_env_cer_mnt_path }}/:/product-labeling/amwaykeys:consistent"
         ports:
            - "8080:8080"
            - "9001:9001"  
         env:
          SPRING_POSTGRES_HOST: "{{ docker_env_spring_pgsql_hostname_name }}"
          SPRING_POSTGRES_USER: "{{ docker_env_spring_pgsql_username }}"
          SPRING_POSTGRES_PASS: "{{ docker_env_spring_pgsql_password }}"
          SPRING_POSTGRES_URL: "jdbc:postgresql://{{ docker_env_spring_pgsql_hostname_name }}:{{ docker_env_spring_pgsql_port }}/{{ docker_env_spring_pgsql_database_name }}?currentSchema={{ docker_env_spring_pgsql_database_name }}"
          SPRING_MSSQL_HOST: "{{ docker_env_spring_mssql_hostname }}"
          SPRING_MSSQL_USER: "{{ docker_env_spring_mssql_username }}"
          SPRING_MSSQL_PASS: "{{ docker_env_spring_mssql_password }}"
          SPRING_MSSQL_URL: "jdbc:sqlserver://{{ docker_env_spring_mssql_hostname }}:{{ docker_env_spring_mssql_port }};databaseName=Orders"
          CPROCSP_KEY_01: "{{ docker_env_cprocsp_key }}"
          CPROCSP_LIC: "{{ docker_env_cprocsp_lic_number }}"
       register: product_labeling_output

     - name: "Wait for continer to start"
       wait_for:
         timeout: 60

     - name: "Verify that container: {{ docker_container_name }} is running"
       assert:
        that:
          - product_labeling_output.container.State.Status == "running"
        fail_msg: "Failed to start container: {{ docker_container_name }}"
        success_msg: "Container {{ docker_container_name }} has been started successfully"

     - name: "Delete docker images older than {{ docker_image_ttl }}"
       docker_prune:
        images: yes
        images_filters:
          until: "{{ docker_image_ttl }}"
          dangling: False

  become: True
  tags:
    - docker-container
