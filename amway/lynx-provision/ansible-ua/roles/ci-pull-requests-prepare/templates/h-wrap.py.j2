#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import re
import os
import subprocess
import junit_xml_output
import datetime
import sys
import time

red_color="\033[1;31m"
black_color="\033[0;30m"
no_color='\033[0m'

def h_runner(run_target, hybris_user, platform_home, test_class, test_method, report_name):
    h_ant_run = subprocess.Popen(run_target, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=platform_home)
    log_out = []
    while True:
        line = h_ant_run.stdout.readline()
        if line != '':
            print line.rstrip()
            log_out.append(line.rstrip())
        else:
            break
    while True:
        err_line = h_ant_run.stderr.readline()
        if err_line != '':
            print "Something was wrong"
            print red_color + "ERROR: " + err_line.rstrip() + no_color
            log_out.append(err_line.rstrip())
        else:
            break
    h_logparce(log_out, config["error_list"], test_class, test_method, report_name)
    pass


def h_logparce(src_logfile, template, test_class, test_method, report_name):
    test_cases = []
    h_errors = []
    for log_lines in src_logfile:
        for error_string_temp in template:
            results = re.search(error_string_temp, log_lines)
            if results:
                h_errors.append(results.group(0))
    if h_errors:
        print "Summary of captured expressions:"
        for a in h_errors:
            print red_color + "ERROR: " + a + no_color
        print black_color + "Number of errors in log: ", len(h_errors)
        test_cases.append(junit_xml_output.TestCase(test_method, "\n".join(h_errors[1:]).decode('ascii', "ignore"), "failure"))
        junit_xml = junit_xml_output.JunitXml(test_class, test_cases)
        # print (junit_xml.dump())
    else:
        print "No expressions found"
        test_cases.append(junit_xml_output.TestCase(test_method, "successfully done", "successful"))
        junit_xml = junit_xml_output.JunitXml(test_class, test_cases)
    path = "test-reports"
    file_name = path + "/"+report_name+"-" + datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S") + ".xml"
    if not os.path.exists(path):
        print "Creating directory " + path
        os.makedirs(path)
    target = open(file_name, "w")
    target.write(junit_xml.dump(pretty=False))
    target.close()
    pass


if __name__ == "__main__":
    # read regex rules
    config = {}
    execfile(os.path.dirname(os.path.abspath(__file__)) + '/rules', config)

    parser = argparse.ArgumentParser()
    parser.add_argument('--file', action='store', dest='log_name', help='Parse stored file')
    parser.add_argument('--sonar', action='store_true', dest='run_sonar', help='Run sonar wrapper')
    parser.add_argument('--ant', action='store_true', dest='run_ant', help='Run ant wrapper')
    parser.add_argument('--ant-initLite', action='store_true', dest='run_ant_initLite', help='Run ant initLite wrapper')
    parser.add_argument('--ant-update', action='store_true', dest='run_ant_update', help='Run ant update wrapper')
    parser.add_argument('--ant-updateRU', action='store_true', dest='run_ant_updateRU', help='Run ant update wrapper')
    parser.add_argument('--ant-updateLite', action='store_true', dest='run_ant_updateLite', help='Run ant updateLite wrapper')
    parser.add_argument('--ant-updateLiteRU', action='store_true', dest='run_ant_updateLiteRU', help='Run ant updateLite wrapper')
    parser.add_argument('--ant-updateTypeSystemOnly', action='store_true', dest='run_ant_updateTypeSystemOnly', help='Run ant updateTypeSystemOnly wrapper')
    parser.add_argument('--ant-updateTypeSystemOnlyRU', action='store_true', dest='run_ant_updateTypeSystemOnlyRU', help='Run ant updateTypeSystemOnly wrapper')
    parser.add_argument('--sonar-projectKey', action='store', dest='s_projectKey', help='Sonar project key')
    parser.add_argument('--sonar-projectName', action='store', dest='s_projectName', help='Sonar project name')
    parser.add_argument('--sonar-projectVersion', action='store', dest='s_projectVersion', help='Sonar project version')
    parser.add_argument('--sonar-language', action='store', dest='s_language', help='Sonar project language approved')
    #parser.add_argument('--sonar-language', action='store', dest='s_language', default='java,js,css,xml', help='Sonar project language approved')
    args = parser.parse_args()

    if args.log_name:
        logfile = open(args.log_name, "r")
        h_logparce(logfile.readlines(), config["error_list"],  "local file test", "Local file", "local")
    if args.run_ant:
        h_runner(['ant', 'initialize'], "username", os.getenv('PLATFORM_HOME', ""), "Hybris initialization", "Local initialize", "ant")
    if args.run_ant_initLite:
        h_runner(['ant', 'initialize', '-Dtenant=master', '-DconfigFile=../custom/lynxeubasestore/resources/initsystem-configuration.json'], "username", os.getenv('PLATFORM_HOME', ""), "Hybris initialization", "Local initialize", "ant")
    if args.run_ant_update:
        h_runner(['ant', 'updatesystem', '-DconfigFile=../custom/lynxeubasestore/resources/updatesystem-configuration_ru.json'], "username", os.getenv('PLATFORM_HOME', ""), "Hybris updatesystem", "Local updatesystem", "ant")
    if args.run_ant_updateRU:
        h_runner(['ant', 'updatesystem', '-DconfigFile=../custom/ciscore/resources/updatesystem-configuration_ru.json'], "username", os.getenv('PLATFORM_HOME', ""), "Hybris updatesystem", "Local updatesystem", "ant")
    if args.run_ant_updateLite:
        h_runner(['ant', 'updatesystemLite', '-DconfigFile=../custom/lynxeubasestore/resources/updatesystem-configuration_ru.json'], "username", os.getenv('PLATFORM_HOME', ""), "Hybris updatesystemLite", "Local updatesystemLite", "ant")
    if args.run_ant_updateLiteRU:
        h_runner(['ant', 'updatesystemLite', '-DconfigFile=../custom/ciscore/resources/updatesystem-configuration_ru.json'], "username", os.getenv('PLATFORM_HOME', ""), "Hybris updatesystemLite", "Local updatesystemLite", "ant")
    if args.run_ant_updateTypeSystemOnly:
        h_runner(['ant', 'updatesystem', '-Dde.hybris.platform.ant.production.skip.build=true', '-Dde.hybris.platform.ant.production.skip.server=true', '-DtypeSystemOnly=true', '-DconfigFile=../custom/lynxeubasestore/resources/updatesystem-configuration_ru.json'], "username", os.getenv('PLATFORM_HOME', ""), "Hybris updatesystemTypeSystemOnly", "Local updatesystemTypeSystemOnly", "ant")
    if args.run_ant_updateTypeSystemOnlyRU:
        h_runner(['ant', 'updatesystem', '-Dde.hybris.platform.ant.production.skip.build=true', '-Dde.hybris.platform.ant.production.skip.server=true', '-DtypeSystemOnly=true', '-DconfigFile=../custom/ciscore/resources/updatesystem-configuration_ru.json'], "username", os.getenv('PLATFORM_HOME', ""), "Hybris updatesystemTypeSystemOnly", "Local updatesystemTypeSystemOnly", "ant")
    if args.run_sonar:
        if not (args.s_projectKey and args.s_projectName and args.s_projectVersion):
            print "Arguments --sonar-projectKey --sonar-projectName --sonar-projectVersion " \
                  "is mandatory with --sonar key"
            sys.exit(1)
            pass
        if args.s_language: # get from client
            h_runner([config["sonar_scanner"], '-e', '-Dsonar.sources='+config["sonar_sources"],
                      '-Dsonar.host.url='+config["sonar_host"], '-Dsonar.projectKey='+args.s_projectKey,
                      '-Dsonar.projectName='+args.s_projectName, '-Dsonar.language='+args.s_language,
                      '-Dsonar.projectVersion='+args.s_projectVersion],
                     "username", os.getenv('PWD', ""), "SonarQube check: "+args.s_projectName,
                     "Go to SonarQube "+config["sonar_host"]+"/overview?id="+args.s_projectKey+" for details", "sonar")
        else: # get from client all block
            h_runner([config["sonar_scanner"], '-e', '-Dsonar.sources='+config["sonar_sources"],
                      '-Dsonar.host.url='+config["sonar_host"], '-Dsonar.projectKey='+args.s_projectKey,
                      '-Dsonar.projectName='+args.s_projectName,
                      '-Dsonar.projectVersion='+args.s_projectVersion],
                      "username", os.getenv('PWD', ""), "SonarQube check: "+args.s_projectName,
                     "Go to SonarQube "+config["sonar_host"]+"/overview?id="+args.s_projectKey+" for details", "sonar")
    #if __debug__:
    #     logfile = open(os.path.dirname(os.path.abspath(__file__)) + ('/test.log'), "r")
    #     print('Debug ON')
    #     h_logparce(logfile.readlines(), config["error_list"], "Hybris initialization", "Local initialize", "debug")
    #     time.sleep(1)
    #     logfile2 = open(os.path.dirname(os.path.abspath(__file__)) + ('/test-sonar.log'), "r")
    #     h_logparce(logfile2.readlines(), config["error_list"], "SonarQube check", "Go to SonarQube for details", "test-sonar")
    #     time.sleep(1)
    #     logfile3 = open(os.path.dirname(os.path.abspath(__file__)) + ('/tes-sonal-fail.log'), "r")
    #     h_logparce(logfile3.readlines(), config["error_list"], "SonarQube check LoL", "Go to SonarQube for details", "tes-sonal-fail")

