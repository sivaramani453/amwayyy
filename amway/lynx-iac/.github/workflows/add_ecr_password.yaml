name: AWS ECR Login

on:
  workflow_dispatch:
  schedule:
    - cron: 0 */6 * * *

jobs:
  ecr_login:
    name: Log in to the AWS ECR
    runs-on: [ubuntu-latest]

    steps:
      - name: Install pip packages
        shell: bash
        run: |
          pip3 install --user pynacl requests boto3

      - name: Retrieve ecr password and store as secret
        shell: python
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          from nacl import encoding, public
          from base64 import b64encode, b64decode
          import boto3
          import requests
          import os
          import json

          access_key_id = os.environ["AWS_ACCESS_KEY_ID"]
          secret_access_key = os.environ["AWS_SECRET_ACCESS_KEY"]
          region = os.environ["AWS_DEFAULT_REGION"]
          gh_repo = os.environ["GITHUB_REPOSITORY"]
          gh_token = os.environ["GIT_TOKEN"]

          def get_ecr_password():
            """Get AWS ECR authorization token."""
            ecr_client = boto3.client(
               "ecr", aws_access_key_id=access_key_id,
                aws_secret_access_key=secret_access_key, region_name=region)

            ecr_credentials = (ecr_client.get_authorization_token()["authorizationData"][0])
            ecr_username = "AWS"

            ecr_password = (
                b64decode(ecr_credentials["authorizationToken"])
                .replace(b"AWS:", b"")
                .decode("utf-8"))

            return ecr_password

          def encrypt(raw_public_key: str, secret_value: str) -> str:
            """Encrypt a Unicode string using the public key."""
            public_key = public.PublicKey(raw_public_key.encode("utf-8"), encoding.Base64Encoder())
            sealed_box = public.SealedBox(public_key)
            encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))

            return b64encode(encrypted).decode("utf-8")

          if __name__ == "__main__":

            try:
              get_public_key = requests.get(f"https://api.github.com/repos/"+ gh_repo +"/actions/secrets/public-key",
                                  headers={"Accept": "application/vnd.github.v3+json",
                                           "Authorization": "token " + gh_token})
              print("Public key has been successfully retrieved.")
            except Exception as err:
              print("Couldn't retrive public key, the reason is: {}".format(err))

            get_public_key_response = get_public_key.json()
            public_key_value = get_public_key_response["key"]
            public_key_id = get_public_key_response["key_id"]

            password = get_ecr_password()
            encrypted_password = encrypt(public_key_value, password)

            try:
              update_password = requests.put("https://api.github.com/repos/"+ gh_repo +"/actions/secrets/ECR_PASSWORD",
                                   headers={"Accept": "application/vnd.github.v3+json",
                                            "Authorization": "token " + gh_token},
                                   data=json.dumps({"encrypted_value": encrypted_password, "key_id": public_key_id}))
              print("ECR_PASSWORD secret has been successfully updated.")
            except Exception as err:
              print("Couldn't update password, the reason is: {}".format(err))
